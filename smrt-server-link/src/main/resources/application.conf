// migrated from SLA into SL
smrtflow {

  // This is still inconsistent and a mess. This needs
  // to be updated to use a consistent naming schema
  // and abandinging the PB_* prefix (or atleast minimizing the PB_* usage
  // for backward compatibility)
  server {
    host = "0.0.0.0"
    host = ${?PB_SERVICES_HOST}
    host = ${?SMRTFLOW_SERVER_HOST}
    port = 8070
    port = ${?PB_SERVICES_PORT}
    port = ${?SMRTFLOW_SERVER_PORT}

    // load versions of other components, SL and SL UI
    manifestFile = ${?PB_SERVICES_MANIFEST_FILE}

    // Event URL
    eventUrl = ${?SMRTFLOW_EVENT_URL}
  }

  engine {
    # This container has a case class EngineConfig
    # The options provided as ${?ENV_VAR_NAME} can be supplied as env vars
    # Max number of Concurrent JobType (pbsmrtpipe, import-dataset, ...) Workers
    maxWorkers = 35
    maxWorkers = ${?PB_ENGINE_MAX_WORKERS}

    # Root directory where all the jobs will reside
    jobRootDir = jobs-root
    jobRootDir = ${?PB_ENGINE_JOB_ROOT}

    # Enable debug mode for jobs
    debug-mode = false
    debug-mode = ${?PB_ENGINE_DEBUG_MODE}

    # The services only have a depenency on three external exes; pbsmrtpipe, sawriter, and samtools
    # Path to setup.sh PB_TOOLS_ENV This will be invoked before the pbsmrtpipe
    # process is called and passed to the exes
    # source /path/to/pb-tools-env.sh && samtools ...
    # if no value is provided, it will assume these processes will be invoked
    # as a child from the parent ENV
    # default of None
    pb-tools-env = ${?PB_TOOLS_ENV}
    # Path to pbsmrtpipe Preset XML
    pbsmrtpipePresetXml = ${?PB_SMRTPIPE_XML_PRESET}

    # Path to the CMD Template file which can be used to call pbsmrtpipe,
    # The template must have the form "bash ${CMD}" (see the "cluster" template for details)
    pb-cmd-template = ${?PB_CMD_TEMPLATE}
  }
}

akka {
  loglevel = DEBUG
  log-dead-letters = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  jvm-exit-on-fatal-error = off
  #log-config-on-start = on
  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      #receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      #autoreceive = on
    }
  }
}


spray.can {
  client {
    parsing {
      max-content-length: 64M
    }
  }
  server {
    registration-timeout: 10 s
  }
}
