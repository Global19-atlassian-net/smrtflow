package com.pacbio.secondary.smrtlink.mail

import org.joda.time.{
  DateTime => JodaDateTime,
  DateTimeZone => JodaDateTimeZone
}
import com.pacbio.secondary.smrtlink.analysis.jobs.AnalysisJobStates
import com.pacbio.secondary.smrtlink.analysis.jobs.JobModels.EngineJob
import org.joda.time.format.DateTimeFormat

import scalatags.Text.all._

/**
  * Created by mkocher on 7/21/17.
  */
object MailTemplates {

  trait EmailTemplate[T] {
    def apply(emailInput: T): EmailTemplateResult
  }

  private def toUser(input: SmrtLinkEmailInputs) =
    p(s"Dear ${input.emailAddress},")

  private def toStatusMessage(input: SmrtLinkEmailInputs) = {
    val msg = if (AnalysisJobStates.isSuccessful(input.jobState)) {
      "Your analysis job has successfully completed."
    } else {
      "Your analysis job has failed."
    }
    p(msg)
  }

  private def toJobLink(input: SmrtLinkEmailInputs) = {
    val m =
      if (AnalysisJobStates.isSuccessful(input.jobState)) br()
      else toTechSupportSummary(input)

    p(s"Please visit the following link to view the results: ",
      a(href := s"${input.jobURL}", s" ${input.jobURL}"),
      m)
  }
  private def formatDateTime(d: JodaDateTime) = {
    val formatter = DateTimeFormat.forPattern("MM/dd/yyyy, HH:mm:ss")
    val dz = d.withZone(JodaDateTimeZone.getDefault())
    formatter.print(dz)
  }

  private def toSummary(input: SmrtLinkEmailInputs) =
    p(
      ul(
        li(s"Job ID: ${input.jobId}"),
        li(s"Job name: ${input.jobName}"),
        li(s"Start  time: ${formatDateTime(input.createdAt)}"),
        li(s"Finish time: ${formatDateTime(input.completedAt)}")
      )
    )
  private def mailto(address: String) = {
    a(href := s"mailto:$address", target := "_top", address)
  }

  private def toTechSupportSummary(input: SmrtLinkEmailInputs) =
    p(
      "For troubleshooting assistance with this run: ",
      br(),
      ol(
        li(
          "File a case by emailing ",
          mailto("support@pacb.com"),
          ". You will receive an autogenerated PacBio customer portal case number."),
        li("Click ",
           b("Send Log Files"),
           " at the SMRT Link page of the failed analysis to send the log files and case number to PacBio technical support.")
      )
    )

  private def toFooter(input: SmrtLinkEmailInputs) =
    p(s"Powered by SMRT Link ${input.smrtLinkVersion.getOrElse("")}",
      br(),
      "Pacific Biosciences of California, Inc.")

  trait SmrtLinkCoreJobEmailTemplate
      extends EmailTemplate[SmrtLinkCoreJobEmailInput] {

    def toSubject(jobId: Int, jobName: String): String

    def apply(emailInput: SmrtLinkCoreJobEmailInput) = {
      val result = html(
        body(
          div(
            toUser(emailInput),
            toStatusMessage(emailInput),
            toSummary(emailInput),
            toJobLink(emailInput),
            toFooter(emailInput)
          )
        )
      )

      EmailTemplateResult(toSubject(emailInput.jobId, emailInput.jobName),
                          result.toString())
    }
  }

  object EmailCoreJobSuccessTemplate extends SmrtLinkCoreJobEmailTemplate {
    override def toSubject(jobId: Int, jobName: String): String =
      s"SMRT Link Job $jobId Successfully Completed: $jobName"
  }

  object EmailCoreJobFailedTemplate extends SmrtLinkCoreJobEmailTemplate {
    override def toSubject(jobId: Int, jobName: String): String =
      s"SMRT Link Job $jobId Failed: $jobName"
  }

  trait SmrtLinkMultiJobEmailTemplate
      extends EmailTemplate[SmrtLinkMultiJobEmailInput] {

    def toSubject(jobId: Int, jobName: String): String

    private def toStatusMessage(input: SmrtLinkEmailInputs) = {
      val msg = if (AnalysisJobStates.isSuccessful(input.jobState)) {
        "Your barcoded analysis job set has successfully completed."
      } else {
        "An analysis job from your barcoded analysis set has failed."
      }
      p(msg)
    }

    def onlyFailedJobsIfNecessary(
        input: SmrtLinkMultiJobEmailInput): Seq[EngineJob] = {
      if (input.wasSuccessful()) {
        input.childrenJobs
      } else {
        input.childrenJobs.filter(_.state == AnalysisJobStates.FAILED)
      }
    }

    def toChildrenJobsSummary(input: SmrtLinkMultiJobEmailInput) =
      ul(
        onlyFailedJobsIfNecessary(input).map(job =>
          li(s"${job.id},${job.name}"))
      )

    def toChildrenHeader(input: SmrtLinkMultiJobEmailInput): String = {
      if (input.wasSuccessful()) "Children Job Ids"
      else "Failed Children Job Ids"
    }

    def toSummary(input: SmrtLinkMultiJobEmailInput) =
      p(
        ul(
          li(s"Job ID: ${input.jobId}"),
          li(s"Job name: ${input.jobName}"),
          li(s"Start  time: ${formatDateTime(input.createdAt)}"),
          li(s"Finish time: ${formatDateTime(input.completedAt)}")
        ),
        ul(
          li(toChildrenHeader(input), toChildrenJobsSummary(input))
        )
      )

    def apply(emailInput: SmrtLinkMultiJobEmailInput) = {
      val result = html(
        body(
          div(
            toUser(emailInput),
            toStatusMessage(emailInput),
            toSummary(emailInput),
            toJobLink(emailInput),
            toFooter(emailInput)
          )
        )
      )

      EmailTemplateResult(toSubject(emailInput.jobId, emailInput.jobName),
                          result.toString())
    }
  }

  object EmailMultiJobSuccessTemplate extends SmrtLinkMultiJobEmailTemplate {
    override def toSubject(jobId: Int, jobName: String): String =
      s"SMRT Link Job $jobId Successfully Completed: $jobName"
  }

  object EmailMultiJobFailedTemplate extends SmrtLinkMultiJobEmailTemplate {
    override def toSubject(jobId: Int, jobName: String): String =
      s"SMRT Link Job $jobId Failed: $jobName"
  }

}
