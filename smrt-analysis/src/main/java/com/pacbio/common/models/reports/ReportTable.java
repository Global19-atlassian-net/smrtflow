/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pacbio.common.models.reports;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReportTable extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2143559524506772754L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReportTable\",\"namespace\":\"com.pacbio.common.models.reports\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\",\"desc\":\"Title of the Table\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ReportTableColumn\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"header\",\"type\":\"string\"},{\"name\":\"value\",\"type\":{\"type\":\"array\",\"items\":[\"int\",\"float\",\"string\",\"null\"]},\"desc\":\"Column values. Attention to mixed-types attempting to represent 'NA'\"}]}},\"desc\":\"List of Columns\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence title;
  @Deprecated public java.util.List<com.pacbio.common.models.reports.ReportTableColumn> columns;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ReportTable() {}

  /**
   * All-args constructor.
   */
  public ReportTable(java.lang.CharSequence id, java.lang.CharSequence title, java.util.List<com.pacbio.common.models.reports.ReportTableColumn> columns) {
    this.id = id;
    this.title = title;
    this.columns = columns;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return columns;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: columns = (java.util.List<com.pacbio.common.models.reports.ReportTableColumn>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'columns' field.
   */
  public java.util.List<com.pacbio.common.models.reports.ReportTableColumn> getColumns() {
    return columns;
  }

  /**
   * Sets the value of the 'columns' field.
   * @param value the value to set.
   */
  public void setColumns(java.util.List<com.pacbio.common.models.reports.ReportTableColumn> value) {
    this.columns = value;
  }

  /**
   * Creates a new ReportTable RecordBuilder.
   * @return A new ReportTable RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportTable.Builder newBuilder() {
    return new com.pacbio.common.models.reports.ReportTable.Builder();
  }
  
  /**
   * Creates a new ReportTable RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReportTable RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportTable.Builder newBuilder(com.pacbio.common.models.reports.ReportTable.Builder other) {
    return new com.pacbio.common.models.reports.ReportTable.Builder(other);
  }
  
  /**
   * Creates a new ReportTable RecordBuilder by copying an existing ReportTable instance.
   * @param other The existing instance to copy.
   * @return A new ReportTable RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportTable.Builder newBuilder(com.pacbio.common.models.reports.ReportTable other) {
    return new com.pacbio.common.models.reports.ReportTable.Builder(other);
  }
  
  /**
   * RecordBuilder for ReportTable instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReportTable>
    implements org.apache.avro.data.RecordBuilder<ReportTable> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence title;
    private java.util.List<com.pacbio.common.models.reports.ReportTableColumn> columns;

    /** Creates a new Builder */
    private Builder() {
      super(com.pacbio.common.models.reports.ReportTable.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pacbio.common.models.reports.ReportTable.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.columns)) {
        this.columns = data().deepCopy(fields()[2].schema(), other.columns);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing ReportTable instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pacbio.common.models.reports.ReportTable other) {
            super(com.pacbio.common.models.reports.ReportTable.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.columns)) {
        this.columns = data().deepCopy(fields()[2].schema(), other.columns);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'columns' field.
      * @return The value.
      */
    public java.util.List<com.pacbio.common.models.reports.ReportTableColumn> getColumns() {
      return columns;
    }

    /**
      * Sets the value of the 'columns' field.
      * @param value The value of 'columns'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder setColumns(java.util.List<com.pacbio.common.models.reports.ReportTableColumn> value) {
      validate(fields()[2], value);
      this.columns = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'columns' field has been set.
      * @return True if the 'columns' field has been set, false otherwise.
      */
    public boolean hasColumns() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'columns' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportTable.Builder clearColumns() {
      columns = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ReportTable build() {
      try {
        ReportTable record = new ReportTable();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.columns = fieldSetFlags()[2] ? this.columns : (java.util.List<com.pacbio.common.models.reports.ReportTableColumn>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
