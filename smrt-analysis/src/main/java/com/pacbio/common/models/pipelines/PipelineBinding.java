/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pacbio.common.models.pipelines;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PipelineBinding extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PipelineBinding\",\"namespace\":\"com.pacbio.common.models.pipelines\",\"fields\":[{\"name\":\"in\",\"type\":{\"type\":\"record\",\"name\":\"InBinding\",\"fields\":[{\"name\":\"taskTypeId\",\"type\":\"string\",\"doc\":\"Task type (tool_contract_id)\"},{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Positional index of Task Input\"},{\"name\":\"instanceId\",\"type\":\"int\",\"doc\":\"Task Type instance id. A pipeline can have multiple instances of the same task type.\"}]},\"doc\":\"Entry Id\"},{\"name\":\"out\",\"type\":{\"type\":\"record\",\"name\":\"OutBinding\",\"fields\":[{\"name\":\"taskTypeId\",\"type\":\"string\",\"doc\":\"Task type (tool_contract_id)\"},{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Positional index of Task Output\"},{\"name\":\"instanceId\",\"type\":\"int\",\"doc\":\"Task Type instance id. A pipeline can have multiple instances of the same task type.\"}]},\"doc\":\"Display Name\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Entry Id */
  @Deprecated public com.pacbio.common.models.pipelines.InBinding in;
  /** Display Name */
  @Deprecated public com.pacbio.common.models.pipelines.OutBinding out;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PipelineBinding() {}

  /**
   * All-args constructor.
   */
  public PipelineBinding(com.pacbio.common.models.pipelines.InBinding in, com.pacbio.common.models.pipelines.OutBinding out) {
    this.in = in;
    this.out = out;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return in;
    case 1: return out;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: in = (com.pacbio.common.models.pipelines.InBinding)value$; break;
    case 1: out = (com.pacbio.common.models.pipelines.OutBinding)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'in' field.
   * Entry Id   */
  public com.pacbio.common.models.pipelines.InBinding getIn() {
    return in;
  }

  /**
   * Sets the value of the 'in' field.
   * Entry Id   * @param value the value to set.
   */
  public void setIn(com.pacbio.common.models.pipelines.InBinding value) {
    this.in = value;
  }

  /**
   * Gets the value of the 'out' field.
   * Display Name   */
  public com.pacbio.common.models.pipelines.OutBinding getOut() {
    return out;
  }

  /**
   * Sets the value of the 'out' field.
   * Display Name   * @param value the value to set.
   */
  public void setOut(com.pacbio.common.models.pipelines.OutBinding value) {
    this.out = value;
  }

  /** Creates a new PipelineBinding RecordBuilder */
  public static com.pacbio.common.models.pipelines.PipelineBinding.Builder newBuilder() {
    return new com.pacbio.common.models.pipelines.PipelineBinding.Builder();
  }
  
  /** Creates a new PipelineBinding RecordBuilder by copying an existing Builder */
  public static com.pacbio.common.models.pipelines.PipelineBinding.Builder newBuilder(com.pacbio.common.models.pipelines.PipelineBinding.Builder other) {
    return new com.pacbio.common.models.pipelines.PipelineBinding.Builder(other);
  }
  
  /** Creates a new PipelineBinding RecordBuilder by copying an existing PipelineBinding instance */
  public static com.pacbio.common.models.pipelines.PipelineBinding.Builder newBuilder(com.pacbio.common.models.pipelines.PipelineBinding other) {
    return new com.pacbio.common.models.pipelines.PipelineBinding.Builder(other);
  }
  
  /**
   * RecordBuilder for PipelineBinding instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PipelineBinding>
    implements org.apache.avro.data.RecordBuilder<PipelineBinding> {

    private com.pacbio.common.models.pipelines.InBinding in;
    private com.pacbio.common.models.pipelines.OutBinding out;

    /** Creates a new Builder */
    private Builder() {
      super(com.pacbio.common.models.pipelines.PipelineBinding.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.pacbio.common.models.pipelines.PipelineBinding.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.in)) {
        this.in = data().deepCopy(fields()[0].schema(), other.in);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.out)) {
        this.out = data().deepCopy(fields()[1].schema(), other.out);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PipelineBinding instance */
    private Builder(com.pacbio.common.models.pipelines.PipelineBinding other) {
            super(com.pacbio.common.models.pipelines.PipelineBinding.SCHEMA$);
      if (isValidValue(fields()[0], other.in)) {
        this.in = data().deepCopy(fields()[0].schema(), other.in);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.out)) {
        this.out = data().deepCopy(fields()[1].schema(), other.out);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'in' field */
    public com.pacbio.common.models.pipelines.InBinding getIn() {
      return in;
    }
    
    /** Sets the value of the 'in' field */
    public com.pacbio.common.models.pipelines.PipelineBinding.Builder setIn(com.pacbio.common.models.pipelines.InBinding value) {
      validate(fields()[0], value);
      this.in = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'in' field has been set */
    public boolean hasIn() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'in' field */
    public com.pacbio.common.models.pipelines.PipelineBinding.Builder clearIn() {
      in = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'out' field */
    public com.pacbio.common.models.pipelines.OutBinding getOut() {
      return out;
    }
    
    /** Sets the value of the 'out' field */
    public com.pacbio.common.models.pipelines.PipelineBinding.Builder setOut(com.pacbio.common.models.pipelines.OutBinding value) {
      validate(fields()[1], value);
      this.out = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'out' field has been set */
    public boolean hasOut() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'out' field */
    public com.pacbio.common.models.pipelines.PipelineBinding.Builder clearOut() {
      out = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public PipelineBinding build() {
      try {
        PipelineBinding record = new PipelineBinding();
        record.in = fieldSetFlags()[0] ? this.in : (com.pacbio.common.models.pipelines.InBinding) defaultValue(fields()[0]);
        record.out = fieldSetFlags()[1] ? this.out : (com.pacbio.common.models.pipelines.OutBinding) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
