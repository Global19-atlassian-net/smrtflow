/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pacbio.common.models.reports;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReportPlot extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7170338216349420804L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReportPlot\",\"namespace\":\"com.pacbio.common.models.reports\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"desc\":\"Plot Id\"},{\"name\":\"image\",\"type\":\"string\",\"desc\":\"Relative Path to Image\"},{\"name\":\"caption\",\"type\":[\"string\",\"null\"],\"desc\":\"Caption of the Plot\"},{\"name\":\"thumbnail\",\"type\":[\"string\",\"null\"],\"desc\":\"Relative path to thumbnail of the Plot\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence image;
  @Deprecated public java.lang.CharSequence caption;
  @Deprecated public java.lang.CharSequence thumbnail;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ReportPlot() {}

  /**
   * All-args constructor.
   */
  public ReportPlot(java.lang.CharSequence id, java.lang.CharSequence image, java.lang.CharSequence caption, java.lang.CharSequence thumbnail) {
    this.id = id;
    this.image = image;
    this.caption = caption;
    this.thumbnail = thumbnail;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return image;
    case 2: return caption;
    case 3: return thumbnail;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: image = (java.lang.CharSequence)value$; break;
    case 2: caption = (java.lang.CharSequence)value$; break;
    case 3: thumbnail = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'image' field.
   */
  public java.lang.CharSequence getImage() {
    return image;
  }

  /**
   * Sets the value of the 'image' field.
   * @param value the value to set.
   */
  public void setImage(java.lang.CharSequence value) {
    this.image = value;
  }

  /**
   * Gets the value of the 'caption' field.
   */
  public java.lang.CharSequence getCaption() {
    return caption;
  }

  /**
   * Sets the value of the 'caption' field.
   * @param value the value to set.
   */
  public void setCaption(java.lang.CharSequence value) {
    this.caption = value;
  }

  /**
   * Gets the value of the 'thumbnail' field.
   */
  public java.lang.CharSequence getThumbnail() {
    return thumbnail;
  }

  /**
   * Sets the value of the 'thumbnail' field.
   * @param value the value to set.
   */
  public void setThumbnail(java.lang.CharSequence value) {
    this.thumbnail = value;
  }

  /**
   * Creates a new ReportPlot RecordBuilder.
   * @return A new ReportPlot RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportPlot.Builder newBuilder() {
    return new com.pacbio.common.models.reports.ReportPlot.Builder();
  }
  
  /**
   * Creates a new ReportPlot RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReportPlot RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportPlot.Builder newBuilder(com.pacbio.common.models.reports.ReportPlot.Builder other) {
    return new com.pacbio.common.models.reports.ReportPlot.Builder(other);
  }
  
  /**
   * Creates a new ReportPlot RecordBuilder by copying an existing ReportPlot instance.
   * @param other The existing instance to copy.
   * @return A new ReportPlot RecordBuilder
   */
  public static com.pacbio.common.models.reports.ReportPlot.Builder newBuilder(com.pacbio.common.models.reports.ReportPlot other) {
    return new com.pacbio.common.models.reports.ReportPlot.Builder(other);
  }
  
  /**
   * RecordBuilder for ReportPlot instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReportPlot>
    implements org.apache.avro.data.RecordBuilder<ReportPlot> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence image;
    private java.lang.CharSequence caption;
    private java.lang.CharSequence thumbnail;

    /** Creates a new Builder */
    private Builder() {
      super(com.pacbio.common.models.reports.ReportPlot.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pacbio.common.models.reports.ReportPlot.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.image)) {
        this.image = data().deepCopy(fields()[1].schema(), other.image);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.caption)) {
        this.caption = data().deepCopy(fields()[2].schema(), other.caption);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.thumbnail)) {
        this.thumbnail = data().deepCopy(fields()[3].schema(), other.thumbnail);
        fieldSetFlags()[3] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing ReportPlot instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pacbio.common.models.reports.ReportPlot other) {
            super(com.pacbio.common.models.reports.ReportPlot.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.image)) {
        this.image = data().deepCopy(fields()[1].schema(), other.image);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.caption)) {
        this.caption = data().deepCopy(fields()[2].schema(), other.caption);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.thumbnail)) {
        this.thumbnail = data().deepCopy(fields()[3].schema(), other.thumbnail);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'image' field.
      * @return The value.
      */
    public java.lang.CharSequence getImage() {
      return image;
    }

    /**
      * Sets the value of the 'image' field.
      * @param value The value of 'image'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder setImage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.image = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'image' field has been set.
      * @return True if the 'image' field has been set, false otherwise.
      */
    public boolean hasImage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'image' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder clearImage() {
      image = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'caption' field.
      * @return The value.
      */
    public java.lang.CharSequence getCaption() {
      return caption;
    }

    /**
      * Sets the value of the 'caption' field.
      * @param value The value of 'caption'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder setCaption(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.caption = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'caption' field has been set.
      * @return True if the 'caption' field has been set, false otherwise.
      */
    public boolean hasCaption() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'caption' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder clearCaption() {
      caption = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'thumbnail' field.
      * @return The value.
      */
    public java.lang.CharSequence getThumbnail() {
      return thumbnail;
    }

    /**
      * Sets the value of the 'thumbnail' field.
      * @param value The value of 'thumbnail'.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder setThumbnail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.thumbnail = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'thumbnail' field has been set.
      * @return True if the 'thumbnail' field has been set, false otherwise.
      */
    public boolean hasThumbnail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'thumbnail' field.
      * @return This builder.
      */
    public com.pacbio.common.models.reports.ReportPlot.Builder clearThumbnail() {
      thumbnail = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ReportPlot build() {
      try {
        ReportPlot record = new ReportPlot();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.image = fieldSetFlags()[1] ? this.image : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.caption = fieldSetFlags()[2] ? this.caption : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.thumbnail = fieldSetFlags()[3] ? this.thumbnail : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
