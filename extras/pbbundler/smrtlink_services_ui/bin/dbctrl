#!/bin/bash
# ---- error handling
set -o errexit;
set -o posix;
set -o pipefail;
set -o errtrace;
set -o nounset;

# Primary Author: Herb Maeder
# Migration of code from perforce (http://swarm/files/depot/software/smrtanalysis/bbmig/build/smrtlink/admin/bin/dbctl)


unexpected_error() {
    local errstat=$?
    echo "${g_prog:-$(basename $0)}: Error! Encountered unexpected error at 'line $(caller)', bailing out..." 1>&2
    exit $errstat;
}
trap unexpected_error ERR;

# ---- error functions

merror() {
    echo "$g_prog: Error! ""$@" 1>&2;
    exit 1;
}
minterror() {
    echo "$g_prog: Internal Error! ""$@" 1>&2;
    exit 1;
}
mwarn() {
    echo "$g_prog: Warning! ""$@" 1>&2;
}

# ---- usage

usage() {
  local exitstat=2;
  if [[ ! -z "${2:-}" ]] ; then
      if [[ ! $2 =~ [[:digit:]]+ ]] ; then
	   minterror "usage(): exitstat ($2) must be numeric."
      fi
      exitstat=$2;
  fi

  # Only redirect to stderr on non-zero exit status
  if [[ $exitstat -ne 0 ]] ; then
      exec 1>&2;
  fi

  if [[ ! -z "${1:-}" ]] ; then
      echo "$g_prog: Error! $1"
  fi

  echo "Usage: $g_prog [--help] --start"
  echo "       $g_prog [--help] --stop"
  echo "       $g_prog [--help] --init"
  echo "       $g_prog [--help] --status"
  echo "       $g_prog [--help] --dbcmd --|--dbcmdargs [args [args]...] "
  echo ""
  echo "         --start        -- start database server"
  echo "         --stop         -- stop database server"
  echo "         --init         -- initialize database dir"
  echo "         --status       -- show status of the database server"
  echo "         --dbcmd        -- run postgres executable"
  echo "         --|--dbcmdargs -- all remaining args passed to pgcmd "
  echo ""
  echo "         -h|--help     -- print this usage";
  echo "";


  if [[ $exitstat -ne 0 ]] ; then
      # Print error again, useful for long usages messages
      if [[ ! -z "${1:-}" ]] ; then
	  echo ""
	  echo "$g_prog: Error! $1"
      fi
  fi

  # bash only:
  if [[ $exitstat -ne 0 ]] ; then
      echo "  at: $(caller)";
  fi
  exit $exitstat;
}

# ---- argument parsing

achk() {
    if [[ $1 -eq 0 ]] ; then usage "Missing argument to $2 option"; fi
}

parseargs() {
    opt_start=false;
    opt_stop=false;
    opt_init=false;
    opt_status=false;
    opt_dbcmd="";
    opt_dbcmdargs=();
    while [[ $# != 0 ]]; do
	opt="$1"; shift;
	case "$opt" in
	    # Flag with no argument example:
	    #   --flag|--fla|--fl|--f)
	    #     opt_flag=true;;
	    # Option with argument example:
	    #   --arg|--ar|--a)
	    #     achk $# $opt; opt_somearg=$1; shift;;
	    --start) opt_start=true;;
	    --stop) opt_stop=true;;
	    --init) opt_init=true;;
	    --status) opt_status=true;;
	    --dbcmd)  achk $# $opt; opt_dbcmd=$1; shift;;
	    --|--dbcmdargs)  opt_dbcmdargs=${1+"$@"}; break;;
	    -h|-help|--help|--hel|--he|--h) usage "" 0;;
	    -*) usage "Unrecognized option: $opt";;
	    *)
		local argstr=${1+"$@"};
		usage "Unexpected extraneous arguments detected: $opt $argstr"
		;;
	esac
    done

    if [[ ! ${opt_start}${opt_stop}${opt_init}${opt_status}${opt_dbcmd:+true} =~ true ]] ; then
	usage "Must specify one of --start, --stop, --init, --status or --dbcmd"
    elif [[ ${opt_start}${opt_stop}${opt_init}${opt_status}${opt_dbcmd:+true} =~ true.*true ]] ; then
	usage "Must specify only one of --start, --stop, --init, --status or --dbcmd"
    fi
}

# ---- globals

set_preglobals() {
    g_prog=$(basename $0);
    g_progdir=$(dirname $0);
    g_progdir_abs=$(greadlink -f "$g_progdir");
    g_config=$(greadlink -f "${g_progdir}/../smrtlink-system-config.json");
}


# ---- subroutines

read_config() {
    # get key from smrtlink-system-config.json
    # Is there a cleaner way to do this?
    # I think we need a thin scala tool to do this. If a path is returned it should be absolute/resolved?
    # with get-value <KEY> <OPTIONAL_DEFAULT> (to handle Option[T]) values
    # Example, get-value smrtflow.server.host "http://my-host"

    logDir=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print os.path.abspath(d['pacBioSystem']['logDir'])" ${g_config})

    g_db_logfile="${logDir}/dbctrl.log"

    # Root data directory where the db files will reside
    #g_db_datadir=$(. "$g_dbconfigfile"; echo "$DBDATADIR")

    # TODO(mpkocher)(3-8-2017) Need to add a new config value. pacBioSystem.dbPath ? For now add load from tmpdir
    g_db_datadir=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print os.path.abspath(d['pacBioSystem']['tmpDir'])" ${g_config})

    g_db_port=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print int(d['smrtflow']['db']['properties']['portNumber'])" ${g_config})

    g_db_host=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print d['smrtflow']['db']['properties']['serverName']" ${g_config})
    # raw password
    g_db_user=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print d['smrtflow']['db']['properties']['password']" ${g_config})
    g_db_password=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print d['smrtflow']['db']['properties']['user']" ${g_config})

    g_db_database_smrtlink=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print d['smrtflow']['db']['properties']['databaseName']" ${g_config})

    # This shows how the password md5 is computed.  Not really needed for this
    # temporary solution, since we are hardwiring the password anyway.
    g_db_password_md5="md5"$(echo -n "${g_db_password}${g_db_user}" | md5sum | sed -e 's/[[:space:]].*//')
}

db_start() {
    echo "Starting database server..."
    local datestr
    datestr=$(echo $(date +"%s")": "$(date))
    echo "===== Starting database: $datestr" >> "$g_db_logfile"
    local stat=0;
    pg_ctl -l "$g_db_logfile" -w -D "$g_db_datadir" -o "-k '' -p $g_db_port -h $g_db_host" start || stat=$?
    if [[ $stat -ne 0 ]] ; then
	echo "Logfile Output:"
	sed -ne "/^===== Starting database: ${datestr%%:*}/,\$p" "$g_db_logfile"
	merror "Error detected in starting database server";
    fi
    exit $stat;
}
db_stop() {
    # FIXME: should we do a dbbackup here?

    echo "Stopping database server..."
    exec pg_ctl -w -D "$g_db_datadir" -o "-p $g_db_port" stop
}
db_init() {

    echo "Initializing database data dir..."
    local stat=0;
    ( set +o posix; pg_ctl -D "$g_db_datadir" -o "-U $g_db_user --auth-host=md5 --auth-local=reject --pwfile="<(echo "$g_db_password_md5") init ) || stat=$?
    exit $stat;
}
db_status() {
    exec pg_ctl -s -D "$g_db_datadir" -o "-p $g_db_port" status
}

# ---- main

# Save off original cmdline args, use as "${g_origargs[@]}" (with doublequotes)
g_origargs=( ${1+"$@"} )

set_preglobals ${1+"$@"};
parseargs ${1+"$@"};

read_config;

if $opt_start; then
    db_start;
elif $opt_stop; then
    db_stop;
elif $opt_init; then
    db_init;
elif $opt_status; then
    db_status;
else
    minterror "Unknown action, specify --start, --stop, --init or --status".
fi