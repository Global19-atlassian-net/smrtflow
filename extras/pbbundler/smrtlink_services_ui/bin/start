#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"

arg1="${1:-}"


# Summary of Operations. Will start the core sub-components Services of the system
# - Postgres DB
# - SLA
# - Tomcat
# - wso2
# Note, SMRT View is started by admin/bin/services-start

# Startup Order
# 1. Validate config via apply-config. Will raise if config is not valid or sub-component config can not be updated
#    successfully. This is potentially bad. Perhaps apply-config should support -i {sub-component} similar to how get-status works.
# 2. check system limits
# 3. Start up the db
# 4. Check if any sub-component of the system is running.
#    a. SLA    if is running, return non-zero
#    b. Tomcat if is running, return non-zero
#    c. wso2   if is running, return non-zero
# 4. SLA    Startup and check status via get-status -i
# 5. Tomcat Startup and check status via get-status -i
# 6. WSO2   Startup and check status via get-status -i
# 7. return 0s if all components successfully started up


# Need to call this here to create the *-jvm-args files
echo "Step #1 Attempting to apply-config"
${__dir}/apply-config
echo "completed applying config"

SL_PREFIX=sl-analysis
SL_SERVICES_PID=${__root}/${SL_PREFIX}.pid
SL_WSO2_PID=${__root}/wso2am-2.0.0/wso2carbon.pid
SL_SERVICES_STDOUT=${__root}/${SL_PREFIX}.stdout
SL_SERVICES_STDERR=${__root}/${SL_PREFIX}.stderr
SL_SERVICES_JVM_ARGS=$(cat ${__root}/services-jvm-args)
SL_SERVICES_LOG_ARGS=$(cat ${__root}/services-log-args)
SL_SERVICES_CONF=${__root}/smrtlink-system-config.json
SL_SERVICES_TOOLS_DIR=${__root}/tools
AMCLIENT=${SL_SERVICES_TOOLS_DIR}/bin/amclient
WSO2_CREDS=${__root}/wso2-credentials.json
# Max number of retries to call sub-component get-status -i {my-component} --max-retries {X}
MAX_RETRIES=30

export PATH=${SL_SERVICES_TOOLS_DIR}/bin:${SL_SERVICES_TOOLS_DIR}/tools/bin:$PATH

TOMCAT_DIR="$__dir/../apache-tomcat-8.0.26"
WSO2_DIR="$__dir/../wso2am-2.0.0"


# TODO Log locally and globally, i.e., log to a file as well as stderr, stdout
logDir=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print os.path.abspath(d['pacBioSystem']['logDir'])" ${SL_SERVICES_CONF})
logStartFile=${logDir}/start.log


echo "Step #2 Checking system requirements (e.g., ulimits)"
${__dir}/check-system-limits
echo "Successfully completed checking system requirements"

echo "Step #3 Checking if db is up and running"
${__dir}/dbctrl start -c ${SL_SERVICES_CONF} --log-level=INFO --log-file=${logDir}/dbctrl.log
echo "Successfully completed check for Postgres database (db is up and running)"


check_port() {
   local port=$1; shift;

   local netstat_available;

   if ! which netstat > /dev/null 2>&1 ; then
	return;
   fi	

   local pidprogs;
   local act_pidprogs;
   pidprogs=$(netstat -l -n -p 2> /dev/null | awk -v pat=":$port" '$4 ~ pat {print $NF}' | sort -u)
   if [[ ! -z "$pidprogs" ]] ; then
       act_pidprogs=$(echo $(echo "$pidprogs" | grep -E -v '^-$'))
       if [[ -z "$act_pidprogs" ]] ; then
          echo "  Port '$port' already in use (by unknown pid/prog)"
       else
          echo "  Port '$port' already in use (by pid/prog: $act_pidprogs)"
       fi
       echo "Daemons not started, exiting."
       exit 4;
   fi
}

check_pid_file() {

    declare pidfile="$1" componentName="$2"

    if [ -f "${pidfile}" ]; then
       PID=`cat ${pidfile}`
       if [[ ${PID} =~ ^[0-9]+$ ]] ; then
          if kill -0 "$PID" > /dev/null 2>&1 ; then
             echo "SMRT Link Sub-component ${componentName} process already running: $SL_SERVICES_PID" 1>&2
             echo "Run services-stop or kill process '$PID', then rerun" 1>&2
             echo "SMRT Link Sub-component ${componentName} services not started!" 1>&2
             exit 2;
          else
             # Stale pid file, remove it and continue on.
             echo "Removing SMRT Link Sub-component ${componentName} services pid file for stale pid ($PID)..."
             rm -f "$SL_SERVICES_PID"
          fi
       else
          echo "Unrecognized pid ($PID) in pid file (${pidfile})" 1>&2
          echo "Services not started!" 1>&2
          exit 3
       fi
    fi
}

echo "Step #4a Checking SMRT Link Analysis services daemon..."
check_pid_file "${SL_SERVICES_PID}" "SMRT Link Analysis Services"
echo "Successfully completed checking SMRT Link Analysis services daemon is NOT running."

echo "Step #4b Checking Tomcat GUI webserver daemon..."

# MK. The CATALINA_PID env var is set via services-start
# Quick check to determine if tomcat is running.  
tomcat_running=false;
if [[ ! -z ${CATALINA_PID+set} ]] && [[ -f "$CATALINA_PID" ]]; then
   pid=$(cat "$CATALINA_PID")
   if [[ $pid =~ ^[0-9]+$ ]] ; then
      if kill -0 "$pid" > /dev/null 2>&1; then     
         tomcat_running=true;
      fi
   fi
fi

# If tomcat is not running, check that all the tomcat ports are not in use.
# If tomcat is running, do not check the ports and let the normal tomcat
# startup fail below.
if ! $tomcat_running; then
   ports=$(cat $TOMCAT_DIR/conf/server.xml | \
	   sed -e 's/<!--.*-->//'| \
           sed -e '/<!--/,/-->/d' | \
           sed -n -e 's/.*[[:space:]]port="\([0-9]\+\)".*/\1/p' | \
           sort -u)
   for port in $ports; do
      check_port "$port"
   done
fi
echo "Successfully completed checking Tomcat GUI webserver daemon is NOT running."


echo "Step #4c Checking WSO2 API Manager daemon..."
check_pid_file "${SL_WSO2_PID}" "WSO2 API Manager"
echo "Successfully completed checking WSO2 API Manager daemon is NOT running."

echo "Completed check of sub-components; SLA, Tomcat and WSO2 API Manager. No sub-component is running"

# Fire up the services
echo "Step #5 Attempting to Start SMRTLink Analysis services daemon..."
env "JAVA_OPTS=${SL_SERVICES_JVM_ARGS} -Dconfig.file=${SL_SERVICES_CONF}" \
    ${SL_SERVICES_TOOLS_DIR}/bin/smrt-server-link-analysis ${SL_SERVICES_LOG_ARGS} \
     > ${SL_SERVICES_STDOUT} \
     2> ${SL_SERVICES_STDERR} &

sl_services_pid=$!
echo ${sl_services_pid} >${SL_SERVICES_PID}
echo "Successfully started up SMRT Link Analysis services on PID ${sl_services_pid}"
 # block until system is up and running. The get-status layer currently only
 # checks for the services, it doesn't check for the PID.
 # FIXME(mpkocher)(2017-3-13) A future version should check the pid and process are running, then check for the services.
${__dir}/get-status --subcomponent-id smrtlink-analysis --max-retries ${MAX_RETRIES} --log-file ${logStartFile}


# Fire up the GUI webserver
echo "Step #6 Attempting to start Tomcat GUI webserver daemon..."
${TOMCAT_DIR}/bin/startup.sh
${__dir}/get-status --subcomponent-id tomcat --max-retries ${MAX_RETRIES} --log-file ${logStartFile}
echo "Successfully started up tomcat GUI webserver"

echo "Attempting to start WSO2 API Manager..."
bash ${WSO2_DIR}/bin/wso2server.sh --start
#${__dir}/get-status --subcomponent-id wso2 --max-retries ${MAX_RETRIES}
#echo "Successfully started up WSO2 API Manager"

# The scala code will block here and wait for wso2 to startup. Need to make this
# configurable to have the same level of MAX_RETRIES interface
echo "Attempting to configure API Manager for SL Analysis backend..."
client_env="JAVA_OPTS=-Xmx256m -Xms256m  -Dconfig.file=${SL_SERVICES_CONF}"
env "$client_env" ${AMCLIENT} create-roles \
       --creds-json ${WSO2_CREDS} --host localhost --log-file ${logStartFile}

env "$client_env" \
     ${AMCLIENT} set-api --swagger-resource /smrtlink_swagger.json \
       --api-name SMRTLink \
       --app-config ${TOMCAT_DIR}/webapps/ROOT/sl/app-config.json \
       --creds-json ${WSO2_CREDS} \
       --host localhost --log-file ${logStartFile}

echo "Attempting to configure API Manager admin proxy..."
env "$client_env" \
     ${AMCLIENT} proxy-admin \
       --api-name RemoteUserStoreManagerService \
       --target https://localhost:9443/services/RemoteUserStoreManagerService.RemoteUserStoreManagerServiceHttpsSoap12Endpoint \
       --app-config ${TOMCAT_DIR}/webapps/ROOT/sl/app-config.json \
       --creds-json ${WSO2_CREDS} \
       --host localhost --log-file ${logStartFile} \
     && echo "Successfully started up and configured WSO2 API Manager for SL Analysis backend"

# This is a bit odd, SMRT View is started by a different layer of the software stack.
# This layer only start 3 of the 4 sub-components of the system up.
echo "Completed starting the SMRT Link Analysis services, tomcat UI server and WSO2 API Manager"
