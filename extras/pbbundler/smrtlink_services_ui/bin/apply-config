#!/usr/bin/env python
"""
Loads the values in config.json and updates the necessary templates.

Specifically,
load, validate, resolve resource paths in config.json to absolute paths,
update the UI config (api-config.json) and
write new config.json

"""
import os
import json
import pprint
import socket
from string import Template
import sys
import logging
import datetime
import functools
import traceback
import argparse

__author__ = "M. Kocher"
__version__ = '0.5.2'


log = logging.getLogger(__name__)

_LOG_FORMAT = '[%(levelname)s] %(asctime)-15s %(message)s'
_TOMCAT_VERSION = "apache-tomcat-8.0.26"
_BUNDLE_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
_CONFIG_JSON = os.path.join(_BUNDLE_ROOT, 'config.json')
_SERVICES_JVM_ARGS = os.path.join(_BUNDLE_ROOT, "services-jvm-args")
_SERVICES_ARGS = os.path.join(_BUNDLE_ROOT, "services-args")
_TOMCAT_ENV = os.path.join(_BUNDLE_ROOT, _TOMCAT_VERSION, "bin", "setenv.sh")
_SERVICES_LOG_LEVEL = "INFO"

# These are Internal
_PROD_CONF = os.path.join(_BUNDLE_ROOT, 'prod.conf')
_TEMPLATE_DIR = os.path.join(_BUNDLE_ROOT, "templates")

# Template to generate the smrtflow db application.conf string
_DB_APP_CONFIG_TEMPLATE = """
smrtflow {
  // Core SMRT Link DB
  db {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    properties = {
      databaseName = ${db_name}
      user = ${user}
      password = ${password}
      portNumber = ${port}
      serverName = ${host}
    }
    numThreads = 10
  }
}
"""


class InvalidConfigOptionResource(IOError):
    """Resource that are not found"""
    pass


def get_parser():
    p = argparse.ArgumentParser(version=__version__,
                                description=__doc__,
                                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    f = p.add_argument
    f('--config-json', default=_CONFIG_JSON, help="Path to Config.json")
    f('--debug', action='store_true', default=False, help="Enable DEBUG logging")
    f('--validate-only', action='store_true', default=False, help="Validate the config.json")
    return p


class ConfigConstants(object):
    """Constants used in config.json"""

    # SMRT Link Services System config
    # host address to bind to
    HOST = "HOST"
    # Tomcat web server Address Port for the UI static files
    PORT = "PB_SERVICES_PORT"

    ENABLE_HTTPS = "ENABLE_HTTPS"
    # SMRT Link Analysis Services PORT
    ANALYSIS_PORT = "PB_SERVICES_ANALYSIS_PORT"
    PB_LOG_DIR = "PB_LOG_DIR"

    # Option[Path] to pacbio-manifest.json File
    PB_MANIFEST_FILE = "PB_MANIFEST_FILE"

    # Event Server URL Option[URL]
    PB_SERVICES_EVENT_URL = "PB_SERVICES_EVENT_URL"

    # Tech Support Server URL Option[URL]
    PB_TECH_SUPPORT_URL = "PB_TECH_SUPPORT_URL"

    # SMRTFLOW Database
    SMRTFLOW_DB_NAME = "SMRTFLOW_DB_NAME"
    SMRTFLOW_DB_USER = "SMRTFLOW_DB_USER"
    SMRTFLOW_DB_PASSWORD = "SMRTFLOW_DB_PASSWORD"
    SMRTFLOW_DB_PORT = "SMRTFLOW_DB_PORT"
    SMRTFLOW_DB_HOST = "SMRTFLOW_DB_HOST"

    # SMRTFLOW Engine
    PB_SMRTPIPE_PRESET = "PB_SMRTPIPE_PRESET_XML"
    PB_SERVICES_NWORKERS = "PB_SERVICES_NWORKERS"
    PB_JOB_ROOT = "PB_JOB_ROOT"
    PB_TMP_DIR = "PB_TMP_DIR"

    PB_ANALYSIS_SHUTDOWN_PORT = "PB_ANALYSIS_SHUTDOWN_PORT"
    PB_ANALYSIS_AJP_PORT = "PB_ANALYSIS_AJP_PORT"

    # Memory, in MB
    PB_SERVICES_ANALYSIS_MEM_MAX = "PB_SERVICES_ANALYSIS_MEM_MAX"
    PB_SERVICES_ANALYSIS_MEM_MIN = "PB_SERVICES_ANALYSIS_MEM_MIN"
    PB_SERVICES_MEM = "PB_SERVICES_MEM"

    # SMRT VIEW PORT
    PB_SMRT_VIEW_PORT = "PB_SMRT_VIEW_PORT"


class SystemConfig(object):
    """
    Default Config Values
    """
    PORT = 8080
    HTTPS_PORT = 8443

    ANALYSIS_PORT = 8070

    # This needs to be rethought
    ENABLE_HTTPS = False

    # SMRTFLOW Database
    SMRTFLOW_DB_NAME = "smrtlink"
    SMRTFLOW_DB_USER = "smrtlink_user"
    SMRTFLOW_DB_PASSWORD = "password"
    SMRTFLOW_DB_PORT = 5432
    SMRTFLOW_DB_HOST = "localhost"

    # These should really have default values that are initialized
    # and Validated
    # For now keeping as Option[String]
    PB_SMRTPIPE_PRESET_XML = None
    PB_JOB_ROOT = None
    PB_TMP_DIR = None
    PB_LOG_DIR = "."

    PB_ANALYSIS_SHUTDOWN_PORT = 8005
    PB_ANALYSIS_AJP_PORT = 8009

    PB_SMRT_VIEW_PORT = 8084

    PB_SERVICES_NWORKERS = 50

    # Memory, in MB
    PB_SERVICES_ANALYSIS_MEM_MAX = 4096
    PB_SERVICES_ANALYSIS_MEM_MIN = 4096
    PB_SERVICES_MEM = 1024

    PB_MANIFEST_FILE = None

    PB_SERVICES_EVENT_URL = None
    PB_TECH_SUPPORT_URL = None

    def __init__(self, host, port, analysis_port, enable_https, pb_pbsmrtpipe_preset_xml,
                 service_nworkers, tmp_dir, log_dir, job_root, pb_analysis_shutdown_port,
                 pb_analysis_ajp_port, smrt_view_port,
                 db_host, db_port, db_name, db_user, db_password,
                 pb_services_analysis_mem_max,
                 pb_services_analysis_mem_min, pb_services_mem, pb_manifest_file, pbservices_event_url,
                 pb_tech_support_url):
        # Tomcat host
        self.host = host
        # Tomcat port
        self.port = port
        # analysis services port
        self.analysis_port = analysis_port
        # Enable https
        self.enable_https = enable_https
        # Option[String]
        self.pb_pbsmrtipe_preset_xml = pb_pbsmrtpipe_preset_xml
        # int
        self.service_nworkers = service_nworkers
        # Option[String] should default to standard env TMP_DIR or TMPDIR
        self.tmp_dir = tmp_dir
        # Option[String]
        self.log_dir = log_dir
        # Option[String]
        self.job_root = job_root

        self.pb_smrt_view_port = smrt_view_port

        # Tomcat server port
        self.pb_analysis_shutdown_port = pb_analysis_shutdown_port
        # Tomcat AJP port
        self.pb_analysis_ajp_port = pb_analysis_ajp_port

        # Smrtlink server Database
        self.db_host = db_host
        self.db_port = db_port
        self.db_name = db_name
        self.db_user = db_user
        self.db_password = db_password

        # Memory, in MB
        self.pb_services_analysis_mem_max = pb_services_analysis_mem_max
        self.pb_services_analysis_mem_min = pb_services_analysis_mem_min
        self.pb_services_mem = pb_services_mem

        self.pb_manifest_file = pb_manifest_file

        self.pbservices_event_url = pbservices_event_url
        self.pb_tech_support_url = pb_tech_support_url

    def __repr__(self):
        _d = dict(k=self.__class__.__name__,
                  h=self.host,
                  p=self.port,
                  a=self.analysis_port, x=self.pb_pbsmrtipe_preset_xml)
        return "<{k} host:{h} port:{p} analysis:{a} preset: {x}>".format(**_d)

    @staticmethod
    def from_dict(d):
        enable_https = d.get(ConfigConstants.ENABLE_HTTPS, SystemConfig.ENABLE_HTTPS)
        default_port = SystemConfig.HTTPS_PORT if enable_https else SystemConfig.PORT
        f = d.get
        return SystemConfig(d[ConfigConstants.HOST],
                            f(ConfigConstants.PORT, default_port),
                            f(ConfigConstants.ANALYSIS_PORT, SystemConfig.ANALYSIS_PORT),
                            enable_https,
                            f(ConfigConstants.PB_SMRTPIPE_PRESET, SystemConfig.PB_SMRTPIPE_PRESET_XML),
                            f(ConfigConstants.PB_SERVICES_NWORKERS, SystemConfig.PB_SERVICES_NWORKERS),
                            f(ConfigConstants.PB_TMP_DIR, SystemConfig.PB_TMP_DIR),
                            f(ConfigConstants.PB_LOG_DIR, SystemConfig.PB_LOG_DIR),
                            f(ConfigConstants.PB_JOB_ROOT, SystemConfig.PB_JOB_ROOT),
                            f(ConfigConstants.PB_ANALYSIS_SHUTDOWN_PORT, SystemConfig.PB_ANALYSIS_SHUTDOWN_PORT),
                            f(ConfigConstants.PB_ANALYSIS_AJP_PORT, SystemConfig.PB_ANALYSIS_AJP_PORT),
                            f(ConfigConstants.PB_SMRT_VIEW_PORT, SystemConfig.PB_SMRT_VIEW_PORT),
                            f(ConfigConstants.SMRTFLOW_DB_HOST, SystemConfig.SMRTFLOW_DB_HOST),
                            f(ConfigConstants.SMRTFLOW_DB_PORT, SystemConfig.SMRTFLOW_DB_PORT),
                            f(ConfigConstants.SMRTFLOW_DB_NAME, SystemConfig.SMRTFLOW_DB_NAME),
                            f(ConfigConstants.SMRTFLOW_DB_USER, SystemConfig.SMRTFLOW_DB_USER),
                            f(ConfigConstants.SMRTFLOW_DB_PASSWORD, SystemConfig.SMRTFLOW_DB_PASSWORD),
                            f(ConfigConstants.PB_SERVICES_ANALYSIS_MEM_MAX, SystemConfig.PB_SERVICES_ANALYSIS_MEM_MAX),
                            f(ConfigConstants.PB_SERVICES_ANALYSIS_MEM_MIN, SystemConfig.PB_SERVICES_ANALYSIS_MEM_MIN),
                            f(ConfigConstants.PB_SERVICES_MEM, SystemConfig.PB_SERVICES_MEM),
                            f(ConfigConstants.PB_MANIFEST_FILE, SystemConfig.PB_MANIFEST_FILE),
                            f(ConfigConstants.PB_SERVICES_EVENT_URL, SystemConfig.PB_SERVICES_EVENT_URL),
                            f(ConfigConstants.PB_TECH_SUPPORT_URL, SystemConfig.PB_TECH_SUPPORT_URL))

    def to_dict(self):
        _comment = "Config writer v{v}. Updated at {d}"\
            .format(d=datetime.datetime.now(), v=__version__)

        _d = {ConfigConstants.HOST: self.host,
              ConfigConstants.PORT: self.port,
              ConfigConstants.ANALYSIS_PORT: self.analysis_port,
              ConfigConstants.ENABLE_HTTPS: self.enable_https,
              ConfigConstants.PB_SMRTPIPE_PRESET: self.pb_pbsmrtipe_preset_xml,
              ConfigConstants.PB_SERVICES_NWORKERS: self.service_nworkers,
              ConfigConstants.PB_TMP_DIR: self.tmp_dir,
              ConfigConstants.PB_LOG_DIR: self.log_dir,
              ConfigConstants.PB_JOB_ROOT: self.job_root,
              ConfigConstants.PB_ANALYSIS_SHUTDOWN_PORT: self.pb_analysis_shutdown_port,
              ConfigConstants.PB_ANALYSIS_AJP_PORT: self.pb_analysis_ajp_port,
              ConfigConstants.SMRTFLOW_DB_HOST: self.db_host,
              ConfigConstants.SMRTFLOW_DB_PORT: self.db_port,
              ConfigConstants.SMRTFLOW_DB_NAME: self.db_name,
              ConfigConstants.SMRTFLOW_DB_USER: self.db_user,
              ConfigConstants.SMRTFLOW_DB_PASSWORD: self.db_password,
              ConfigConstants.PB_SMRT_VIEW_PORT: self.pb_smrt_view_port,
              ConfigConstants.PB_SERVICES_ANALYSIS_MEM_MAX: self.pb_services_analysis_mem_max,
              ConfigConstants.PB_SERVICES_ANALYSIS_MEM_MIN: self.pb_services_analysis_mem_min,
              ConfigConstants.PB_SERVICES_MEM: self.pb_services_mem,
              ConfigConstants.PB_MANIFEST_FILE: self.pb_manifest_file,
              ConfigConstants.PB_SERVICES_EVENT_URL: self.pbservices_event_url,
              ConfigConstants.PB_TECH_SUPPORT_URL: self.pb_tech_support_url,
              "_comment": _comment}
        return _d


class ConstantsTemplateVars(object):
    """Constants used in templates"""
    ANALYSIS_SERVER_URI = "ANALYSIS_SERVER_URI"
    TOMCAT_PORT = "TOMCAT_PORT"
    PB_ANALYSIS_SHUTDOWN_PORT = "PB_ANALYSIS_SHUTDOWN_PORT"
    PB_ANALYSIS_AJP_PORT = "PB_ANALYSIS_AJP_PORT"
    SSL_KEYSTORE_FILE = "SSL_KEYSTORE_FILE"


class ConstantsTemplateNames(object):
    """Template Names"""
    SLINK_UI_SERVICE = "api-server.config.json"
    TOMCAT_SERVER_XML = "server.xml"
    TOMCAT_HTTPS_SERVER_XML = "https-server.xml"
    SSL_KEYSTORE_FILE = ".keystore"


class TemplateConstants(object):
    # Config to update for SMRT Link
    SLINK_CONFIG = _TOMCAT_VERSION + '/webapps/ROOT/' + ConstantsTemplateNames.SLINK_UI_SERVICE
    TOMCAT_CONFIG = _TOMCAT_VERSION + '/conf/' + ConstantsTemplateNames.TOMCAT_SERVER_XML
    SSL_KEYSTORE_FILE = os.path.join(_BUNDLE_ROOT, ConstantsTemplateNames.SSL_KEYSTORE_FILE)


def validate_resource(func, path, prefix_msg=None):
    p = os.path.abspath(os.path.expanduser(path))
    if not func(p):
        msg = "Unable to find {f}".format(f=p)
        if prefix_msg is not None:
            msg += " {m}".format(m=msg)
            log.error(msg)
        raise InvalidConfigOptionResource(msg)
    return p

validate_file = functools.partial(validate_resource, os.path.isfile)
validate_dir = functools.partial(validate_resource, os.path.isdir)


def render_template(sx, **kwargs):
    return Template(sx).safe_substitute(**kwargs)


def load_system_config(path):
    log.info("Loading config from {p}".format(p=path))

    with open(path, 'r') as f:
        d = json.loads(f.read())

    logging.info("Loaded raw config")
    logging.info(pprint.pformat(d))

    return SystemConfig.from_dict(d)


def update_system_config(system_config, output_path, comment=None):
    log.info("attempting to update {c} to {d}".format(d=system_config, c=output_path))
    _chmod_config(system_config)
    _d = system_config.to_dict()
    if comment is not None:
        _d['_comment'] = comment
    with open(output_path, 'w') as f:
        f.write(json.dumps(_d, indent=4, sort_keys=True))
    log.info("successfully updated {d}".format(d=output_path))


def _chmod_config(path):
    os.chmod(path, 0o644)


def _load_template(path):
    with open(path, 'r') as f:
        s = f.read()
    t = Template(s)
    return t


def load_local_template_by_name(name):
    p = os.path.join(_TEMPLATE_DIR, name)
    return _load_template(p)


def update_by(template_name, template_var, template_value):
    log.info("Updating {c} to {x}".format(c=template_name, x=template_value))
    t = load_local_template_by_name(template_name)
    _d = {template_var: template_value}
    s = t.substitute(**_d)
    return s


def update_multiple_by(template_name, template_updates):
    for var, value in template_updates.iteritems():
        log.info("Updating {k} to {v} in {t}".format(k=var, v=value, t=template_name))
    t = load_local_template_by_name(template_name)
    s = t.substitute(template_updates)
    return s


def update_and_write(template_name, template_var, template_value, output_file):
    log.debug("Updating template {n} {k}->{v} output'ing to {o}".format(n=template_name, k=template_var, v=template_var, o=output_file))
    s = update_by(template_name, template_var, template_value)
    with open(output_file, 'w') as w:
        w.write(s)
    log.debug("Updated {k}={v} in {o}".format(k=template_var, v=template_value, o=output_file))
    return s


def update_multiple_and_write(template_name, template_updates, output_file):
    for var, value in template_updates.iteritems():
        log.debug("Updating template {n} {k}->{v} output'ing to {o}".format(n=template_name, k=var, v=value, o=output_file))
    s = update_multiple_by(template_name, template_updates)
    with open(output_file, 'w') as w:
        w.write(s)
    for var, value in template_updates.iteritems():
        log.debug("Updated {k}={v} in {o}".format(k=var, v=value, o=output_file))
    return s


def _to_db_application_config(host, port, db_name, user, password):
    _d = dict(host=host, port=port, db_name=db_name, password=password, user=user)
    return render_template(_DB_APP_CONFIG_TEMPLATE, **_d)


def _to_application_conf(c):
    """Convert scala application.conf config format

    :type c: SystemConfig
    """
    outs = []
    _to_application_conf.ind = 0

    def line(s):
        outs.append("  " * _to_application_conf.ind + s)

    def head(label):
        line(label + " {")
        _to_application_conf.ind += 1

    def tail():
        _to_application_conf.ind -= 1
        line("}")

    def out(key, value, wrap_quotes=False, lower=False):
        pair = "{k} = \"{v}\"" if wrap_quotes else "{k} = {v}"
        val = str.lower(str(value)) if lower else str(value)
        line(pair.format(k=key, v=val))

    def out_if_not_none(key, value, wrap_quotes=False, lower=False):
        if value is not None:
            log.debug("Setting {k} -> {v}".format(k=key, v=value))
            out(key, value, wrap_quotes, lower)
        else:
            log.warn("Skipping setting {k} (Using default)".format(k=key))

    # include application.conf from the jar
    line("include classpath(\"application.conf\")")
    
    head("pb-services")
    # this path might have ',' which will create problems
    out_if_not_none("manifest-file", c.pb_manifest_file, wrap_quotes=True)
    tail()

    outs.append(_to_db_application_config(c.db_host, c.db_port, c.db_name, c.db_user, c.db_password))

    head("pb-engine")
    # Don't pass the preset to the application.conf if the preset
    # is None
    out_if_not_none("pb-smrtpipe-preset-xml", c.pb_pbsmrtipe_preset_xml)
    out_if_not_none("jobs-root", c.job_root)
    out_if_not_none("max-workers", c.service_nworkers)
    out_if_not_none("pb-tmp-dir", c.tmp_dir)
    tail()

    line("# written by config-writer v{v} on {d}".format(v=__version__, d=datetime.datetime.now()))
    return "\n".join(outs) + "\n"


def write_application_conf(output_file, c):
    s = _to_application_conf(c)
    with open(output_file, 'w') as w:
        w.write(s)
    return s


def to_uri(host, port, base_url="", https=False):
    proto = "https://" if https else "http://"
    h = host if host.startswith(proto) else "{proto}{h}".format(proto=proto, h=host)
    u = base_url if (len(base_url) == 0 or base_url.startswith("/")) else ("/" + base_url)
    return "{h}:{p}{u}".format(h=h, p=port, u=u)


def to_smrt_link_ui_config_d(host, services_port, smrtview_port, service_event_url=None, tech_support_url=None):
    """
    New Configuration format in 3.1.0

    :param host: Host to use
    :param services_port: SL/SA services port
    :param smrtview_port: SV port

    :return: dict conf of SL UI
    """
    smrtview_uri = to_uri(host, smrtview_port)
    services_uri = to_uri(host, 8243, "", https=True)
    auth_uri = to_uri(host, 8243, https=True)

    d = {"smrt-view": {"default-server": smrtview_uri},
         "smrt-link": {"default-server": services_uri},
         "auth": {"default-server": auth_uri},
         "events-url": {"default-server": service_event_url},
         "tech-support": {"default-server": tech_support_url}
         }

    return d


def write_smrt_link_ui_config(d, file_name):
    with open(file_name, 'w') as f:
        f.write(json.dumps(d, sort_keys=True, indent=4))
    return file_name


def update_server_path_in_ui(host, services_port, smrtview_port, event_url, tech_support_url):

    output_file = os.path.join(_BUNDLE_ROOT, TemplateConstants.SLINK_CONFIG)

    d = to_smrt_link_ui_config_d(host, services_port, smrtview_port, event_url, tech_support_url)
    log.debug("SL UI Config\n" + pprint.pformat(d))
    _ = write_smrt_link_ui_config(d, output_file)
    log.debug("Writing SL UI Config to {f}".format(f=output_file))

    return output_file


def update_tomcat(port, shutdown_port, ajp_port, enable_https, tomcat_mem):
    output_file = os.path.join(_BUNDLE_ROOT, TemplateConstants.TOMCAT_CONFIG)

    updates = {ConstantsTemplateVars.TOMCAT_PORT               : port,
               ConstantsTemplateVars.PB_ANALYSIS_SHUTDOWN_PORT : shutdown_port,
               ConstantsTemplateVars.PB_ANALYSIS_AJP_PORT      : ajp_port,
               ConstantsTemplateVars.SSL_KEYSTORE_FILE         : TemplateConstants.SSL_KEYSTORE_FILE}

    input_file = ConstantsTemplateNames.TOMCAT_HTTPS_SERVER_XML if enable_https else ConstantsTemplateNames.TOMCAT_SERVER_XML
    update_multiple_and_write(input_file, updates, output_file)

    with open(_TOMCAT_ENV, 'w') as f:
        f.write("export CATALINA_OPTS=\"$CATALINA_OPTS -Xmx{tomcat_mem}m -Xms{tomcat_mem}m\"\n".format(tomcat_mem=tomcat_mem))
    
    return output_file


def write_services_jvm_args(pb_services_analysis_mem_max, pb_services_analysis_mem_min):
    with open(_SERVICES_JVM_ARGS, 'w') as f:
        f.write("-Xmx{max}m -Xms{min}m".format(
            max=pb_services_analysis_mem_max,
            min=pb_services_analysis_mem_min))


def write_services_args(log_dir):
    with open(_SERVICES_ARGS, 'w') as f:
        f.write("--log-file {dir}/secondary-smrt-server.log --log-level {level}".format(
            dir=log_dir,
            level=_SERVICES_LOG_LEVEL))


def validate_system_config(sconf):
    """
    Core Validation and Resolving of relative paths of resources in the System Config


    :type sconf SystemConfig
    :raises InvalidConfigOptionResource

    """
    log.info("Validating Config:")
    sconf.job_root = validate_dir(sconf.job_root, prefix_msg="Invalid Job Root")
    sconf.pb_pbsmrtipe_preset_xml = validate_file(sconf.pb_pbsmrtipe_preset_xml, prefix_msg="Invalid pbsmrtpipe preset.xml")
    sconf.tmp_dir = validate_dir(sconf.tmp_dir, prefix_msg="Invalid tmp dir")
    sconf.log_dir = validate_dir(sconf.log_dir, prefix_msg="Invalid Log Directory")

    if sconf.pb_manifest_file is not None:
        sconf.pb_manifest_file = validate_file(sconf.pb_manifest_file, prefix_msg="Invalid pacbio-manifest.json")

    log.info("Successfully validated config")
    return sconf


def main(argv=sys.argv[1:]):
    """
    - load, validate, resolve resource paths in config.json to absolute paths
    - Update UI config
    - write new config.json

    :return: exit code
    :rtype: int
    """
    p = get_parser()
    args = p.parse_args(argv)

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=_LOG_FORMAT, stream=sys.stdout)
        log.debug(args)
    else:
        log.addHandler(logging.NullHandler())

    config_json = args.config_json

    log.debug("Running apply-config v{v}".format(v=__version__))

    try:
        c = load_system_config(config_json)
        log.debug(c)
        c = validate_system_config(c)
        if args.validate_only:
            return 0

        # This assumes the services are launched from the same system,
        # the host in the config is for other tools to know which host
        if c.host is None:
            c.host = socket.getfqdn()
            log.info("Null host detected. Setting host to FQDN {h}".format(h=c.host))
            log.info("Updating HOST in config.json")
            update_system_config(c, _CONFIG_JSON)

        write_application_conf(_PROD_CONF, c)

        write_services_jvm_args(c.pb_services_analysis_mem_max,
                                c.pb_services_analysis_mem_min)

        write_services_args(c.log_dir)

        update_server_path_in_ui(c.host,
                                 c.analysis_port,
                                 c.pb_smrt_view_port,
                                 c.pbservices_event_url,
                                 c.pb_tech_support_url)

        update_tomcat(c.port,
                      c.pb_analysis_shutdown_port,
                      c.pb_analysis_ajp_port,
                      SystemConfig.ENABLE_HTTPS,
                      c.pb_services_mem)

        rcode = 0

    except InvalidConfigOptionResource as ex:
        sys.stderr.write("Invalid config.json. {e}".format(e=ex))
        traceback.print_exc(file=sys.stderr)
        rcode = 2
    except Exception as ex:
        sys.stderr.write("Invalid config.json. Unhandled exception {e}".format(e=ex))
        traceback.print_exc(file=sys.stderr)
        rcode = 1

    logging.info("Completed {f} v{v} exit code {r}".format(r=rcode, f=__file__, v=__version__))
    return rcode


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
