#!/usr/bin/env python
"""
Loads the values in config.json and updates the necessary templates.

Specifically,
load, validate, resolve resource paths in config.json to absolute paths,
update the UI config (api-config.json) and
write new config.json

"""
import os
import json
import pprint
import socket
from string import Template
import sys
import logging
import datetime
import functools
import traceback
import argparse

__author__ = "M. Kocher"
__version__ = '0.8.0'


log = logging.getLogger(__name__)
log.addHandler(logging.NullHandler()) # stop the logger from complaining

_LOG_FORMAT = '[%(levelname)s] %(asctime)-15s %(message)s'
_TOMCAT_VERSION = "apache-tomcat-8.0.26"
_STATIC_FILE_DIR = "sl"
_BUNDLE_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
_TOMCAT_ENV = os.path.join(_BUNDLE_ROOT, _TOMCAT_VERSION, "bin", "setenv.sh")
_WSO2_API_DIR = os.path.join(_BUNDLE_ROOT, "wso2am-2.0.0", "repository", "deployment", "server", "synapse-configs", "default", "api")
_WSO2_HTTPS_PORT = 8243
_SERVICES_LOG_LEVEL = "INFO"
# Note, changes here, will require changes in bin/start
_CONFIG_JSON = os.path.join(_BUNDLE_ROOT, 'smrtlink-system-config.json')
_SERVICES_JVM_ARGS = os.path.join(_BUNDLE_ROOT, "services-jvm-args")
_SERVICES_ARGS = os.path.join(_BUNDLE_ROOT, "services-log-args")

# This is a hack to load the default value in the bundle. Once Herb
# updates the installer to write the required key, "smrtflow.server.bundleDir"
# this should be removed.
_PACBIO_BUNDLE_DIR = os.path.join(_BUNDLE_ROOT, "pacbio-bundles")

# These are Internal
_TEMPLATE_DIR = os.path.join(_BUNDLE_ROOT, "templates")
_WSO2_TEMPLATE_DIR = "templates-wso2"


class InvalidConfigOptionResource(IOError):
    """Resource that are not found, or invalid values"""
    pass


def get_parser():
    p = argparse.ArgumentParser(version=__version__,
                                description=__doc__,
                                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    f = p.add_argument
    f('--config-json', default=_CONFIG_JSON,
      help="Path to SMRT Link System Config HOCON smrtlink-system-config.json sfile")
    f('--debug', action='store_true', default=False, help="Enable DEBUG logging to both stdout and file handler.")
    f('--log-file', default=None,
      help="Custom path to log file output. Default will output to the location defined in the "
           "smrtlink-system-config.json file.")
    f('--validate-only', action='store_true', default=False, help="Validate the SMRT Link System Config HOCON JSON file")
    return p


class SystemConfig(object):
    """
    Default Config Values
    """
    PORT = 8080
    HTTPS_PORT = 8443

    ANALYSIS_PORT = 8070

    # This needs to be rethought
    ENABLE_HTTPS = False

    # SMRTFLOW Database
    SMRTFLOW_DB_NAME = "smrtlink"
    SMRTFLOW_DB_USER = "smrtlink_user"
    SMRTFLOW_DB_PASSWORD = "password"
    SMRTFLOW_DB_PORT = 5432
    SMRTFLOW_DB_HOST = "localhost"

    # These should really have default values that are initialized
    # and Validated
    # For now keeping as Option[String]
    PB_SMRTPIPE_PRESET_XML = None
    PB_JOB_ROOT = None
    PB_TMP_DIR = None
    PB_LOG_DIR = "."

    PB_SMRT_VIEW_PORT = 8084

    PB_SERVICES_NWORKERS = 50

    # Memory, in MB
    PB_SERVICES_ANALYSIS_MEM_MAX = 4096
    PB_SERVICES_ANALYSIS_MEM_MIN = 4096
    PB_SERVICES_MEM = 1024

    PB_MANIFEST_FILE = None

    PB_SERVICES_EVENT_URL = None
    PB_TECH_SUPPORT_URL = None

    def __init__(self, host, port, analysis_port, enable_https, pb_pbsmrtpipe_preset_xml,
                 service_nworkers, tmp_dir, log_dir, job_root, smrt_view_port,
                 db_host, db_port, db_name, db_user, db_password,
                 pb_services_analysis_mem_max,
                 pb_services_analysis_mem_min, pb_services_mem, pb_manifest_file, pbservices_event_url,
                 pb_tech_support_url, bundle_dir):
        # Tomcat host
        self.host = host
        # Tomcat port
        self.port = port
        # analysis services port
        self.analysis_port = analysis_port
        # Enable https
        self.enable_https = enable_https
        # Option[String]
        self.pb_pbsmrtipe_preset_xml = pb_pbsmrtpipe_preset_xml
        # int
        self.service_nworkers = service_nworkers
        # Option[String] should default to standard env TMP_DIR or TMPDIR
        self.tmp_dir = tmp_dir
        # Option[String]
        self.log_dir = log_dir
        # Option[String]
        self.job_root = job_root

        self.pb_smrt_view_port = smrt_view_port

        # Smrtlink server Database
        self.db_host = db_host
        self.db_port = db_port
        self.db_name = db_name
        self.db_user = db_user
        self.db_password = db_password

        # Memory, in MB
        self.pb_services_analysis_mem_max = pb_services_analysis_mem_max
        self.pb_services_analysis_mem_min = pb_services_analysis_mem_min
        self.pb_services_mem = pb_services_mem

        self.pb_manifest_file = pb_manifest_file

        self.pbservices_event_url = pbservices_event_url
        self.pb_tech_support_url = pb_tech_support_url

        self.bundle_dir = bundle_dir

    def __repr__(self):
        _d = dict(k=self.__class__.__name__,
                  h=self.host,
                  p=self.port,
                  a=self.analysis_port, x=self.pb_pbsmrtipe_preset_xml)
        return "<{k} host:{h} port:{p} analysis:{a} preset: {x}>".format(**_d)

    @staticmethod
    def from_dict(d):

        smrtflow = d['smrtflow']
        server = smrtflow['server']
        engine = smrtflow['engine']
        dbp = smrtflow['db']['properties']
        pb = d['pacBioSystem']

        dns_name = server['dnsName']
        sl_port = server['port']
        event_url = server['eventUrl']
        manifest_file = server['manifestFile']

        max_workers = engine['maxWorkers']
        job_root = engine['jobRootDir']
        pbsmrtpipe_preset_xml = engine['pbsmrtpipePresetXml']

        db_name = dbp['databaseName']
        db_user = dbp['user']
        db_password = dbp['password']
        db_port = dbp['portNumber']
        db_host = dbp['serverName']

        tomcat_port = pb['tomcatPort']
        tomcat_memory = pb['tomcatMemory']
        sl_min_memory = pb['smrtLinkServerMemoryMin']
        sl_max_memory = pb['smrtLinkServerMemoryMax']
        smrtview_port = pb['smrtViewPort']
        tmp_dir = pb['tmpDir']
        log_dir = pb['logDir']

        # SEE comments about this Hack. the value is required now in the schema
        bundle_dir = server.get("bundleDir", _PACBIO_BUNDLE_DIR)

        # FIXME
        enable_https = False

        return SystemConfig(dns_name, tomcat_port, sl_port, enable_https, pbsmrtpipe_preset_xml, max_workers, tmp_dir,
                            log_dir, job_root, smrtview_port, db_host, db_port, db_name, db_user, db_password,
                            sl_max_memory, sl_min_memory, tomcat_memory, manifest_file, event_url, event_url, bundle_dir)

    def to_dict(self):
        _comment = "Config writer v{v}. Updated at {d}"\
            .format(d=datetime.datetime.now(), v=__version__)

        server = dict(dnsName=self.host,
                      port=self.analysis_port,
                      manifestFile=self.pb_manifest_file,
                      eventUrl=self.pbservices_event_url,
                      bundleDir=self.bundle_dir)
        engine = dict(maxWorkers=self.service_nworkers, jobRootDir=self.job_root, pbsmrtpipePresetXml=self.pb_pbsmrtipe_preset_xml)
        dbp = dict(databaseName=self.db_name, user=self.db_user, password=self.db_password, portNumber=self.db_port, serverName=self.db_host)
        db = dict(properties=dbp)
        pb = dict(tomcatPort=self.port, tomcatMemory=self.pb_services_mem,
                  smrtLinkServerMemoryMin=self.pb_services_analysis_mem_min,
                  smrtLinkServerMemoryMax=self.pb_services_analysis_mem_max,
                  smrtViewPort=self.pb_smrt_view_port, tmpDir=self.tmp_dir, logDir=self.log_dir)

        smrtflow = dict(server=server, engine=engine, db=db)

        return dict(smrtflow=smrtflow, pacBioSystem=pb, comment=_comment)


class ConstantsTemplateVars(object):
    """Constants used in templates"""
    ANALYSIS_SERVER_URI = "ANALYSIS_SERVER_URI"
    TOMCAT_HOST = "TOMCAT_HOST"
    TOMCAT_PORT = "TOMCAT_PORT"
    STATIC_FILE_DIR = "STATIC_FILE_DIR"
    WSO2_HOST = "WSO2_HOST"
    WSO2_PORT = "WSO2_PORT"
    SSL_KEYSTORE_FILE = "SSL_KEYSTORE_FILE"


class ConstantsTemplateNames(object):
    """Template Names"""
    SLINK_UI_SERVICE = "api-server.config.json"
    TOMCAT_SERVER_XML = "server.xml"
    TOMCAT_HTTPS_SERVER_XML = "https-server.xml"
    TOMCAT_INDEX = "index.jsp"
    SSL_KEYSTORE_FILE = ".keystore"
    UI_PROXY_FILE = "_sl-ui_.xml"


class TemplateConstants(object):
    # Config to update for SMRT Link
    SLINK_CONFIG = os.path.join(_TOMCAT_VERSION, "webapps", "ROOT", _STATIC_FILE_DIR, ConstantsTemplateNames.SLINK_UI_SERVICE)
    TOMCAT_CONFIG = os.path.join(_TOMCAT_VERSION, "conf", ConstantsTemplateNames.TOMCAT_SERVER_XML)
    TOMCAT_REDIRECT = os.path.join(_TOMCAT_VERSION, "webapps", "ROOT", ConstantsTemplateNames.TOMCAT_INDEX)
    SSL_KEYSTORE_FILE = os.path.join(_BUNDLE_ROOT, ConstantsTemplateNames.SSL_KEYSTORE_FILE)
    UI_PROXY_CONFIG = os.path.join(_WSO2_API_DIR, ConstantsTemplateNames.UI_PROXY_FILE)


def validate_resource(func, path, prefix_msg=None):
    p = os.path.abspath(os.path.expanduser(path))
    if not func(p):
        msg = "Unable to find {f}".format(f=p)
        if prefix_msg is not None:
            msg += " {m}".format(m=msg)
            log.error(msg)
        raise InvalidConfigOptionResource(msg)
    return p

validate_file = functools.partial(validate_resource, os.path.isfile)
validate_dir = functools.partial(validate_resource, os.path.isdir)


def render_template(sx, **kwargs):
    return Template(sx).safe_substitute(**kwargs)


def load_system_config(path):
    log.info("Loading config from HOCON json file {p}".format(p=path))

    with open(path, 'r') as f:
        d = json.loads(f.read())

    log.debug("Loaded raw config")
    log.debug(pprint.pformat(d))

    return SystemConfig.from_dict(d)


def write_system_config(system_config, output_path):
    log.debug("attempting to write SL System config {c} to {d}".format(d=system_config, c=output_path))
    _chmod_config(output_path)
    _d = system_config.to_dict()
    with open(output_path, 'w') as f:
        f.write(json.dumps(_d, indent=4, sort_keys=True))
    log.debug("successfully updated {d}".format(d=output_path))


def _chmod_config(path):
    os.chmod(path, 0o644)


def _load_template(path):
    with open(path, 'r') as f:
        s = f.read()
    t = Template(s)
    return t


def load_local_template_by_name(name):
    p = os.path.join(_TEMPLATE_DIR, name)
    return _load_template(p)


def update_by(template_name, template_var, template_value):
    log.debug("Updating {c} to {x}".format(c=template_name, x=template_value))
    t = load_local_template_by_name(template_name)
    _d = {template_var: template_value}
    s = t.substitute(**_d)
    return s


def update_multiple_by(template_name, template_updates):
    for var, value in template_updates.iteritems():
        log.debug("Updating {k} to {v} in {t}".format(k=var, v=value, t=template_name))
    t = load_local_template_by_name(template_name)
    s = t.substitute(template_updates)
    return s


def update_and_write(template_name, template_var, template_value, output_file):
    log.debug("Updating template {n} {k}->{v} output'ing to {o}".format(n=template_name, k=template_var, v=template_var, o=output_file))
    s = update_by(template_name, template_var, template_value)
    with open(output_file, 'w') as w:
        w.write(s)
    log.debug("Updated {k}={v} in {o}".format(k=template_var, v=template_value, o=output_file))
    return s


def update_multiple_and_write(template_name, template_updates, output_file):
    for var, value in template_updates.iteritems():
        log.debug("Updating template {n} {k}->{v} output'ing to {o}".format(n=template_name, k=var, v=value, o=output_file))
    s = update_multiple_by(template_name, template_updates)
    with open(output_file, 'w') as w:
        w.write(s)
    for var, value in template_updates.iteritems():
        log.debug("Updated {k}={v} in {o}".format(k=var, v=value, o=output_file))
    return s


def to_uri(host, port, base_url="", https=False):
    proto = "https://" if https else "http://"
    h = host if host.startswith(proto) else "{proto}{h}".format(proto=proto, h=host)
    u = base_url if (len(base_url) == 0 or base_url.startswith("/")) else ("/" + base_url)
    return "{h}:{p}{u}".format(h=h, p=port, u=u)


def to_smrt_link_ui_config_d(host, services_port, wso2_https_port, smrtview_port, service_event_url=None, tech_support_url=None):
    """
    New Configuration format in 3.1.0

    :param host: Host to use
    :param wso2_https_port: SL/SA services port using WSO2
    :param smrtview_port: SV port

    :return: dict conf of SL UI
    """
    smrtview_uri = to_uri(host, smrtview_port)
    services_uri = to_uri(host, wso2_https_port, "", https=True)
    services_backend_uri = to_uri(host, services_port)
    auth_uri = to_uri(host, wso2_https_port, https=True)

    d = {"smrt-view": {"default-server": smrtview_uri},
         "smrt-link": {"default-server": services_uri},
         "smrt-link-backend": {"default-server": services_backend_uri},
         "auth": {"default-server": auth_uri},
         "events-url": {"default-server": service_event_url},
         "tech-support": {"default-server": tech_support_url}
         }

    return d


def write_smrt_link_ui_config(d, file_name):
    with open(file_name, 'w') as f:
        f.write(json.dumps(d, sort_keys=True, indent=4))
    return file_name


def update_server_path_in_ui(host, services_port, wso2_https_port, smrtview_port, event_url, tech_support_url):

    output_file = os.path.join(_BUNDLE_ROOT, TemplateConstants.SLINK_CONFIG)

    d = to_smrt_link_ui_config_d(host, services_port, wso2_https_port, smrtview_port, event_url, tech_support_url)
    log.debug("SL UI Config\n" + pprint.pformat(d))
    _ = write_smrt_link_ui_config(d, output_file)
    log.debug("Writing SL UI Config to {f}".format(f=output_file))

    return output_file


def update_tomcat(port, enable_https, tomcat_mem):
    output_file = os.path.join(_BUNDLE_ROOT, TemplateConstants.TOMCAT_CONFIG)

    updates = {ConstantsTemplateVars.TOMCAT_PORT               : port,
               ConstantsTemplateVars.SSL_KEYSTORE_FILE         : TemplateConstants.SSL_KEYSTORE_FILE}

    input_file = ConstantsTemplateNames.TOMCAT_HTTPS_SERVER_XML if enable_https else ConstantsTemplateNames.TOMCAT_SERVER_XML
    update_multiple_and_write(input_file, updates, output_file)

    with open(_TOMCAT_ENV, 'w') as f:
        f.write("export CATALINA_OPTS=\"$CATALINA_OPTS -Xmx{tomcat_mem}m -Xms{tomcat_mem}m\"\n".format(tomcat_mem=tomcat_mem))
    
    return output_file


def update_redirect(wso2_host, wso2_port, static_dir):
    output_file = os.path.join(_BUNDLE_ROOT, TemplateConstants.TOMCAT_REDIRECT)
    updates = {ConstantsTemplateVars.WSO2_HOST       : wso2_host,
               ConstantsTemplateVars.WSO2_PORT       : wso2_port,
               ConstantsTemplateVars.STATIC_FILE_DIR : static_dir}

    input_file = os.path.join(_TEMPLATE_DIR, ConstantsTemplateNames.TOMCAT_INDEX)
    update_multiple_and_write(input_file, updates, output_file)


def update_sl_ui(host, port, static_dir):
    output_file = os.path.join(_WSO2_API_DIR, ConstantsTemplateNames.UI_PROXY_FILE)
    updates = {ConstantsTemplateVars.TOMCAT_HOST     : host,
               ConstantsTemplateVars.TOMCAT_PORT     : port,
               ConstantsTemplateVars.STATIC_FILE_DIR : static_dir}

    input_file = os.path.join(_TEMPLATE_DIR, _WSO2_TEMPLATE_DIR, ConstantsTemplateNames.UI_PROXY_FILE)
    update_multiple_and_write(input_file, updates, output_file)


def write_services_jvm_args(pb_services_analysis_mem_max, pb_services_analysis_mem_min):
    with open(_SERVICES_JVM_ARGS, 'w') as f:
        f.write("-Xmx{max}m -Xms{min}m".format(
            max=pb_services_analysis_mem_max,
            min=pb_services_analysis_mem_min))


def write_services_args(log_dir):
    with open(_SERVICES_ARGS, 'w') as f:
        f.write("--log-file {dir}/secondary-smrt-server.log --log-level {level}".format(
            dir=log_dir,
            level=_SERVICES_LOG_LEVEL))


def validate_system_config(sconf):
    """
    Core Validation and Resolving of relative paths of resources in the System Config


    :type sconf SystemConfig
    :raises InvalidConfigOptionResource

    """
    log.debug("Validating SMRT Link System Config:")
    sconf.job_root = validate_dir(sconf.job_root, prefix_msg="Invalid Job Root")
    sconf.pb_pbsmrtipe_preset_xml = validate_file(sconf.pb_pbsmrtipe_preset_xml, prefix_msg="Invalid pbsmrtpipe preset.xml")
    sconf.tmp_dir = validate_dir(sconf.tmp_dir, prefix_msg="Invalid tmp dir")
    sconf.log_dir = validate_dir(sconf.log_dir, prefix_msg="Invalid Log Directory")

    if sconf.pb_manifest_file is not None:
        sconf.pb_manifest_file = validate_file(sconf.pb_manifest_file, prefix_msg="Invalid pacbio-manifest.json")

    log.info("Successfully validated config")
    return sconf


def setup_logger(alog, level=logging.INFO, file_name=None,
                 log_filter=None,
                 str_formatter='[%(levelname)s] %(asctime)-15s [%(name)s %(funcName)s %(lineno)d] %(message)s'):
    """
    Because we want to log to the output dir defined in the smrtlink-system-config, the logging config
    needs to be delayed until after the config is parsed.

    :param alog: a log instance
    :param level: (int) Level of logging debug
    :param file_name: (str, None) if None, stdout is used, str write to file
    :param log_filter: (LogFilter, None)
    :param str_formatter: (str) log formatting str
    """
    alog.setLevel(logging.DEBUG)
    # this is the magic that enables the log to have different handlers with different log levels
    alog.propagate = 0

    if file_name is None:
        handler = logging.StreamHandler(sys.stdout)
    else:
        handler = logging.FileHandler(file_name)

    formatter = logging.Formatter(str_formatter)
    handler.setFormatter(formatter)
    handler.setLevel(level)

    if log_filter:
        handler.addFilter(log_filter)

    alog.addHandler(handler)

    return alog


def main(argv=sys.argv[1:]):
    """
    - load, validate, resolve resource paths in config.json to absolute paths
    - Update UI config
    - write new config.json

    :return: exit code
    :rtype: int
    """
    p = get_parser()
    args = p.parse_args(argv)

    #
    log_level_stdout = logging.WARN
    log_level_file = logging.INFO
    if args.debug:
        log_level_stdout = logging.DEBUG
        log_level_file = logging.DEBUG

    config_json = args.config_json

    try:
        c = load_system_config(config_json)
        c = validate_system_config(c)

        # now that we have the logDir location, setup the logger(s)

        if args.log_file is None:
            apply_config_log = os.path.join(os.path.abspath(c.log_dir), "apply-config.log")
        else:
            apply_config_log = os.path.abspath(os.path.expanduser(args.log_file))

        setup_logger(log, log_level_file, file_name=apply_config_log)

        setup_logger(log, log_level_stdout, file_name=None, str_formatter=_LOG_FORMAT)

        log.debug("Running apply-config v{v}".format(v=__version__))

        log.debug(c)
        log.debug(args)

        if args.validate_only:
            return 0
        # Hack. this is necessary to get the required bundleDir to be added to the config for the services
        write_system_config(c, config_json)

        host = c.host

        if c.host is None:
            host = socket.getfqdn()
            log.warn("Null host detected. using FQDN {h} for host. User are recommended to manually set this value.".format(h=host))

        write_services_jvm_args(c.pb_services_analysis_mem_max,
                                c.pb_services_analysis_mem_min)

        write_services_args(c.log_dir)

        update_server_path_in_ui(host,
                                 c.analysis_port,
                                 _WSO2_HTTPS_PORT,
                                 c.pb_smrt_view_port,
                                 c.pbservices_event_url,
                                 c.pb_tech_support_url)

        update_tomcat(c.port,
                      SystemConfig.ENABLE_HTTPS,
                      c.pb_services_mem)

        update_sl_ui(host, c.port, _STATIC_FILE_DIR)

        update_redirect(host, _WSO2_HTTPS_PORT, _STATIC_FILE_DIR)

        rcode = 0

    except InvalidConfigOptionResource as ex:
        sys.stderr.write("Invalid SL System config {c}. {e}".format(e=ex, c=config_json))
        traceback.print_exc(file=sys.stderr)
        rcode = 2
    except Exception as ex:
        sys.stderr.write("Invalid SL System config {c}. Unhandled exception {e}".format(e=ex, c=config_json))
        traceback.print_exc(file=sys.stderr)
        rcode = 1

    log.info("Completed {f} v{v} exit code {r}".format(r=rcode, f=__file__, v=__version__))
    return rcode


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
