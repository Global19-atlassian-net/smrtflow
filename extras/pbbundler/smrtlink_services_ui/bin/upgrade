#!/usr/bin/env bash

set -e

# 1. This will startup the db (if it's not running)
# 2. Run dbctl migrate --sqlite-path=/path/file.sqlite -m legacy-migration.json
# 3. Shut down db if it wasn't originally running

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
rootBundleDir=$(dirname "${__dir}")

config=${rootBundleDir}/smrtlink-system-config.json
legacyConfig=${rootBundleDir}/migration-config.json
migrationState=${rootBundleDir}/legacy-migration.json
userRoles=${rootBundleDir}/user-roles.json
adminCreds=${rootBundleDir}/wso2-credentials.json
# for the wso2 consumer key/secret
appConfig=${rootBundleDir}/apache-tomcat-8.0.26/webapps/ROOT/sl/app-config.json

if ! [ -e "$config" ]; then
    echo "file ${config} does not exist"
    exit 1
fi

# TODO Log locally and globally, i.e., log to a file as well as stderr, stdout
logDir=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print os.path.abspath(d['pacBioSystem']['logDir'])" ${config})
logFile=${logDir}/upgrade.log

# To enable tools called from dbctrl
export PATH=${rootBundleDir}/tools/bin:${rootBundleDir}/bin:$PATH

if [ -e "$legacyConfig" ]; then
    ${rootBundleDir}/bin/dbctrl migrate -c ${config} --legacy-migration-json ${migrationState} --migration-config ${legacyConfig} --log-file=${logFile} --log-level=INFO
else
    # Install from a fresh install (create users/db/tables if necessary)
    ${rootBundleDir}/bin/dbctrl setup -c ${config} --log-file=${logFile} --log-level=INFO
fi


# configure/upgrade wso2

function checkPid {
    local pid=$1; shift;
    kill -0 "${pid}" > /dev/null 2>&1
}

function waitThenKill {
    local pid=$1; shift;
    r=6
    while [ ${r} -gt 0 ] && (checkPid "${pid}") ; do
        echo "waiting for process ${pid}"
        sleep 10s
        r=$[${r}-1]
    done
    if checkPid "${pid}"; then
        echo "process ${pid} still running"
        echo "Sending kill signal to PID ${pid}"
        kill -9 ${pid} || true
    fi
    # wait for ports to go through TIME_WAIT
    sleep 60
}

clientEnv="JAVA_OPTS=-Xmx256m -Xms256m  -Dconfig.file=${config}"

newWso2=${rootBundleDir}/wso2am-2.0.0
amClient=${rootBundleDir}/tools/bin/amclient
amClientArgs="--creds-json ${adminCreds} --host localhost --log-file ${logFile}"

if [ -e "${legacyConfig}" ]; then
    prevInstall=$(python -c "import json,sys; d=json.load(open(sys.argv[1])); print ('' if (d['PREVIOUS_INSTALL_DIR'] is None) else d['PREVIOUS_INSTALL_DIR'])" ${legacyConfig})
    oldWso2=${prevInstall}/wso2am-2.0.0
    userstoreDir=repository/deployment/server/userstores
    sslDir=repository/resources/security
    confDir=repository/conf

    if [ -d "${prevInstall}" ]; then
        # copy SSL cert and related info (if applicable)
        KEYSTORE=`grep "<Location>" "${oldWso2}/$confDir"/carbon.xml | head -1 | sed 's#</Location>##; s#.*security/##;'`
        KEYPW=`grep "<KeyPassword>" "${oldWso2}/$confDir"/carbon.xml | head -1 | sed 's#.*<KeyPassword>##; s#</KeyPassword>##;'`
        if [ "$KEYSTORE" != "wso2carbon.jks" ] || [ "$KEYPW" != "wso2carbon" ]; then
            HOSTNAME=`grep "<HostName>" "${oldWso2}/$confDir"/carbon.xml | head -1 | sed 's#.*<HostName>##; s#</HostName>##;'`
            echo "Transferring SSL certificate config for $HOSTNAME"
            install-ssl-cert $HOSTNAME "${oldWso2}/$sslDir"/$KEYSTORE "${oldWso2}/$sslDir"/client-truststore.jks "$KEYPW"
        fi

        # copy userstore (e.g., LDAP) config(s)
        N_USERSTORE_FILES=`find "${oldWso2}/${userstoreDir}" -type f | wc -l`
        if [ "$N_USERSTORE_FILES" != "0" ]; then
            cp -n ${oldWso2}/${userstoreDir}/* ${newWso2}/${userstoreDir}/
        fi

        if [ ! -e "${userRoles}" ]; then
            bash ${oldWso2}/bin/wso2server.sh --start
            sleep 5
            wso2Pid=$(< ${oldWso2}/wso2carbon.pid)
            trap "echo 'cleaning up'; kill ${wso2Pid} 2> /dev/null || true; waitThenKill ${wso2Pid}" EXIT

            env "$clientEnv" ${amClient} get-roles-users ${amClientArgs} --role-json ${userRoles}
            bash ${oldWso2}/bin/wso2server.sh --stop
            waitThenKill ${wso2Pid}
        fi

        # If user roles from the previous install are available, start WSO2 and
        # add them.  Additional configuration steps will be done when services
        # are started
        if [ -e "${userRoles}" ]; then
            bash ${newWso2}/bin/wso2server.sh --start
            sleep 5
            wso2Pid=$(< ${newWso2}/wso2carbon.pid)
            trap "echo 'cleaning up'; kill ${wso2Pid} 2> /dev/null || true; waitThenKill ${wso2Pid}" EXIT

            env "$clientEnv" ${amClient} create-roles ${amClientArgs}
            env "$clientEnv" ${amClient} set-roles-users ${amClientArgs} --role-json ${userRoles}

            wso2Pid=$(< ${newWso2}/wso2carbon.pid)
            bash ${newWso2}/bin/wso2server.sh --stop
            waitThenKill ${wso2Pid}
        fi

    fi
fi

trap - EXIT
