//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.19 at 11:50:03 AM PST 
//


package com.pacificbiosciences.pacbioreagentkit;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ReagentKey.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ReagentKey"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Base"/&gt;
 *     &lt;enumeration value="DTT"/&gt;
 *     &lt;enumeration value="DilBuffer"/&gt;
 *     &lt;enumeration value="MineralOil"/&gt;
 *     &lt;enumeration value="MIXED_DilBuffer"/&gt;
 *     &lt;enumeration value="MIXED_OS"/&gt;
 *     &lt;enumeration value="OSbuffer"/&gt;
 *     &lt;enumeration value="OSenzyme"/&gt;
 *     &lt;enumeration value="PhospholinkedNT"/&gt;
 *     &lt;enumeration value="SABuffer"/&gt;
 *     &lt;enumeration value="Spike"/&gt;
 *     &lt;enumeration value="Streptavidin"/&gt;
 *     &lt;enumeration value="SubstrateOS"/&gt;
 *     &lt;enumeration value="TSQ"/&gt;
 *     &lt;enumeration value="WashBuffer"/&gt;
 *     &lt;enumeration value="WettingBuffer"/&gt;
 *     &lt;enumeration value="PCA"/&gt;
 *     &lt;enumeration value="PCD"/&gt;
 *     &lt;enumeration value="Analog"/&gt;
 *     &lt;enumeration value="Sample"/&gt;
 *     &lt;enumeration value="PEGDilBuffer"/&gt;
 *     &lt;enumeration value="ExtraBuffer"/&gt;
 *     &lt;enumeration value="PrewetBuffer"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ReagentKey")
@XmlEnum
public enum ReagentKey {

    @XmlEnumValue("Base")
    BASE("Base"),
    DTT("DTT"),
    @XmlEnumValue("DilBuffer")
    DIL_BUFFER("DilBuffer"),
    @XmlEnumValue("MineralOil")
    MINERAL_OIL("MineralOil"),
    @XmlEnumValue("MIXED_DilBuffer")
    MIXED_DIL_BUFFER("MIXED_DilBuffer"),
    MIXED_OS("MIXED_OS"),
    @XmlEnumValue("OSbuffer")
    O_SBUFFER("OSbuffer"),
    @XmlEnumValue("OSenzyme")
    O_SENZYME("OSenzyme"),
    @XmlEnumValue("PhospholinkedNT")
    PHOSPHOLINKED_NT("PhospholinkedNT"),
    @XmlEnumValue("SABuffer")
    SA_BUFFER("SABuffer"),
    @XmlEnumValue("Spike")
    SPIKE("Spike"),
    @XmlEnumValue("Streptavidin")
    STREPTAVIDIN("Streptavidin"),
    @XmlEnumValue("SubstrateOS")
    SUBSTRATE_OS("SubstrateOS"),
    TSQ("TSQ"),
    @XmlEnumValue("WashBuffer")
    WASH_BUFFER("WashBuffer"),
    @XmlEnumValue("WettingBuffer")
    WETTING_BUFFER("WettingBuffer"),
    PCA("PCA"),
    PCD("PCD"),
    @XmlEnumValue("Analog")
    ANALOG("Analog"),
    @XmlEnumValue("Sample")
    SAMPLE("Sample"),
    @XmlEnumValue("PEGDilBuffer")
    PEG_DIL_BUFFER("PEGDilBuffer"),
    @XmlEnumValue("ExtraBuffer")
    EXTRA_BUFFER("ExtraBuffer"),
    @XmlEnumValue("PrewetBuffer")
    PREWET_BUFFER("PrewetBuffer");
    private final String value;

    ReagentKey(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReagentKey fromValue(String v) {
        for (ReagentKey c: ReagentKey.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
