//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: XXX
//


package com.pacificbiosciences.pacbiobasedatamodel;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SupportedFilterNames.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SupportedFilterNames">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="rname"/>
 *     &lt;enumeration value="length"/>
 *     &lt;enumeration value="qstart"/>
 *     &lt;enumeration value="qend"/>
 *     &lt;enumeration value="qname"/>
 *     &lt;enumeration value="qid"/>
 *     &lt;enumeration value="movie"/>
 *     &lt;enumeration value="zm"/>
 *     &lt;enumeration value="bc"/>
 *     &lt;enumeration value="bcr"/>
 *     &lt;enumeration value="bcf"/>
 *     &lt;enumeration value="bcq"/>
 *     &lt;enumeration value="bq"/>
 *     &lt;enumeration value="qs"/>
 *     &lt;enumeration value="rq"/>
 *     &lt;enumeration value="pos"/>
 *     &lt;enumeration value="tstart"/>
 *     &lt;enumeration value="tend"/>
 *     &lt;enumeration value="accuracy"/>
 *     &lt;enumeration value="readstart"/>
 *     &lt;enumeration value="cx"/>
 *     &lt;enumeration value="n_subreads"/>
 *     &lt;enumeration value="mapqv"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SupportedFilterNames")
@XmlEnum
public enum SupportedFilterNames {

    @XmlEnumValue("rname")
    RNAME("rname"),
    @XmlEnumValue("length")
    LENGTH("length"),
    @XmlEnumValue("qstart")
    QSTART("qstart"),
    @XmlEnumValue("qend")
    QEND("qend"),
    @XmlEnumValue("qname")
    QNAME("qname"),
    @XmlEnumValue("qid")
    QID("qid"),
    @XmlEnumValue("movie")
    MOVIE("movie"),
    @XmlEnumValue("zm")
    ZM("zm"),
    @XmlEnumValue("bc")
    BC("bc"),
    @XmlEnumValue("bcr")
    BCR("bcr"),
    @XmlEnumValue("bcf")
    BCF("bcf"),
    @XmlEnumValue("bcq")
    BCQ("bcq"),
    @XmlEnumValue("bq")
    BQ("bq"),
    @XmlEnumValue("qs")
    QS("qs"),
    @XmlEnumValue("rq")
    RQ("rq"),
    @XmlEnumValue("pos")
    POS("pos"),
    @XmlEnumValue("tstart")
    TSTART("tstart"),
    @XmlEnumValue("tend")
    TEND("tend"),
    @XmlEnumValue("accuracy")
    ACCURACY("accuracy"),
    @XmlEnumValue("readstart")
    READSTART("readstart"),
    @XmlEnumValue("cx")
    CX("cx"),
    @XmlEnumValue("n_subreads")
    N_SUBREADS("n_subreads"),
    @XmlEnumValue("mapqv")
    MAPQV("mapqv");
    private final String value;

    SupportedFilterNames(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SupportedFilterNames fromValue(String v) {
        for (SupportedFilterNames c: SupportedFilterNames.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
